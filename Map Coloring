def is_safe(vertex, color, graph, colors):
    for neighbor in graph[vertex]:
        if colors[neighbor] == color:
            return False
    return True

def map_coloring(graph, num_colors):
    total_vertices = len(graph)
    colors = [0] * total_vertices

    def backtrack(vertex):
        if vertex == total_vertices:
            return True

        for color in range(1, num_colors + 1):
            if is_safe(vertex, color, graph, colors):
                colors[vertex] = color
                if backtrack(vertex + 1):
                    return True
                colors[vertex] = 0

    if backtrack(0):
        return colors
    else:
        return None


sample_map = {
    0: [1, 4],
    1: [0, 2, 4],
    2: [1, 3, 4],
    3: [2, 4],
    4: [0, 1, 2, 3],
}

num_colors = 4  

colored_map = map_coloring(sample_map, num_colors)
if colored_map:
    print("Map coloring result:")
    for vertex, color in enumerate(colored_map):
        print(f"Region {vertex}: Color {color}")
else:
    print("No valid coloring possible with the given number of colors.")
